# Assignments

## List Assignments

```shell
<%= api_get_request('/assignments') %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "assignments",
  "total_assignments": 2000,
  "page": 1,
  "per_page": 2,
  "total_pages": 1000,
  "assignments":[
    {
      "id": 1,
      "resource_type": "assignment",
      "assignee_id": 1,
      "score": 90,
      "assignable_type": "Lesson",
      "assignable_id": 1,
      "ext_uid": "ABC123",
      "due_by": "2020-09-30T00:00:00Z",
      "assigned_at": "2020-03-20T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "status": "Completed",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": "2016-03-28T18:20:06Z",
      "updated_at": "2016-03-28T18:20:06Z"
    },
    {
      "id": 2,
      "resource_type": "assignment",
      "assignee_id": 2,
      "score": null,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": null,
      "updated_at": "2016-03-28T18:20:06Z"
    },
    {
      "id": 3,
      "resource_type": "assignment",
      "assignee_id": 3,
      "score": null,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2016-03-27T14:15:17Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "status": "Overdue",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": null,
      "updated_at": "2016-03-28T18:20:06Z"
    },
    {
      "id": 4,
      "resource_type": "assignment",
      "assignee_id": 4,
      "score": null,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "status": "Grade Pending",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": null,
      "updated_at": "2016-03-28T18:20:06Z"
    }
  ]
}
```

This endpoint returns paginated assignments in no particular order across all of your users, lessons, and paths. Optionally, you can filter by assignments with activity after a given ISO8601 timestamp by passing `gt[updated_at]=TIMESTAMP` in the query string.

To view assignments for a particular [user](#user-assignments), [lesson](#lesson-assignments), or [path](#path-assignments) please use those dedicated endpoints.

### HTTP Request

`GET https://api.lessonly.com/api/v1/assignments`

### Query Parameters

Parameter | Required | Type | Description
--------- | ------- | ------- | -----------
<%= pagination_query_params.chomp %>
gt | no | String | Specified greater than filter for assignments list.  Supported filters are (updated_at). Please follow ISO8601 date format.

## List Assignments (v1.1)

```shell
<%= api_get_request('/assignments', 'v1.1') %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "assignments",
  "total_assignments": 2000,
  "page": 1,
  "per_page": 2,
  "total_pages": 1000,
  "assignments":[
    {
      "id": 1,
      "resource_type": "assignment",
      "assignee_id": 1,
      "assignable_type": "Lesson",
      "assignable_id": 1,
      "ext_uid": "ABC123",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2016-03-22T17:35:17Z",
      "status": "Completed",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": "2016-03-28T18:20:06Z",
      "score": "1.0"
      "updated_at": "2016-03-28T18:20:06Z"
    },
    {
      "id": 2,
      "resource_type": "assignment",
      "assignee_id": 2,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2016-03-28T10:25:17Z",
      "status": "Incomplete",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": null,
      "score" : "0.5",
      "updated_at": "2016-03-28T18:20:06Z",
      "contents": [
        {
          "id": 2,
          "resource_type": "lesson",
          "started_at": null,
          "completed_at": null,
          "score": "1.0",
          "status": "Incomplete"
        },
        {
          "id": 4,
          "resource_type": "path",
          "contents": [
            {
              "id": 3,
              "resource_type": "lesson",
              "started_at": "2019-01-18T09:48:10Z",
              "completed_at": "2019-01-18T14:43:33Z",
              "score": "0.0",
              "status": "Completed"
            },
            {
              "id": 5,
              "resource_type": "path",
              "contents": [
                {
                  "id": 4,
                  "resource_type": "lesson",
                  "started_at": "2019-01-18T09:48:10Z",
                  "completed_at": "2019-01-18T14:43:33Z",
                  "score": null,
                  "status": "Completed"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": 3,
      "resource_type": "assignment",
      "assignee_id": 3,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2016-03-27T14:15:17Z",
      "reassigned_at": "2016-03-20T14:15:17Z",
      "status": "Completed",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": "2016-03-30T18:20:06Z",
      "updated_at": "2016-03-28T18:20:06Z",
      "contents": [
        {
          "id": 2,
          "resource_type": "lesson",
          "started_at": "2016-03-28T14:15:17Z",
          "completed_at": "2016-03-30T18:20:06Z",
          "status": "Completed"
        },
      ]
    },
    {
      "id": 4,
      "resource_type": "assignment",
      "assignee_id": 3,
      "assignable_type": "Lesson",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2016-03-27T14:15:17Z",
      "reassigned_at": null,
      "status": "Overdue",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": null,
      "updated_at": "2016-03-28T18:20:06Z"
    },
    {
      "id": 5,
      "resource_type": "assignment",
      "assignee_id": 4,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 1,
      "ext_uid": "DEF456",
      "assigned_at": "2016-02-22T17:35:17Z",
      "due_by": "2016-03-27T14:15:17Z",
      "reassigned_at": "2016-03-23T16:43:17Z",
      "status": "Grade Pending",
      "started_at": "2016-03-28T14:15:17Z",
      "completed_at": "2016-03-30T18:20:06Z",
      "updated_at": "2016-03-28T18:20:06Z",
      "contents": [
        {
          "id": 2,
          "resource_type": "lesson",
          "started_at": "2016-03-28T14:15:17Z",
          "completed_at": null,
          "status": "Incomplete"
        },
      ]
    }
  ]
}
```

This endpoint returns paginated assignments in no particular order across all of your users, lessons, and paths. Optionally, you can filter by assignments with activity after a given ISO8601 timestamp by passing `gt[updated_at]=TIMESTAMP` in the query string.

Path assignments show completion status (Completed/Incomplete) for lessons in the path.

To view assignments for a particular [user](#user-assignments), [lesson](#lesson-assignments), or [path](#path-assignments) please use those dedicated endpoints.

### HTTP Request

`GET https://api.lessonly.com/api/v1.1/assignments`

### Query Parameters

Parameter | Required | Type | Description
--------- | ------- | ------- | -----------
<%= pagination_query_params.chomp %>
gt | no | String | Specified greater than filter for assignments list.  Supported filters are (updated_at). Please follow ISO8601 date format.

## Show Assignments by Status

```shell
<%= api_get_request('/assignments/:status') %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "assignments",
  "total_assignments": 2000,
  "page": 1,
  "per_page": 2,
  "total_pages": 1000,
  "assignments": [
    {
      "id": 5566,
      "resource_type": "assignment",
      "assignee_id": 1735,
      "assignable_type": "Lesson",
      "assignable_id": 855,
      "ext_uid": "5745967403",
      "assigned_at": "2014-01-20T20:07:07Z",
      "due_by": "2014-05-13T04:00:00Z",
      "reassigned_at": "2014-05-07T18:33:46Z",
      "status": "Completed",
      "updated_at": "2015-10-08T19:58:28Z",
      "score": 100,
      "started_at": "2014-08-04T14:31:42Z",
      "completed_at": "2014-08-04T14:36:16Z"
    },
    {
      "id": 6876654,
      "resource_type": "assignment",
      "assignee_id": 3120575,
      "assignable_type": "LearningPaths::Path",
      "assignable_id": 19433,
      "ext_uid": null,
      "assigned_at": "2018-12-12T13:02:21Z",
      "due_by": null,
      "reassigned_at": null,
      "status": "Incomplete",
      "updated_at": "2018-12-13T18:35:40Z",
      "score": null,
      "started_at": "2018-12-13T18:35:40Z",
      "completed_at": null
    }
  ]
}
```

This endpoint retrieves all assignments by their status.

### HTTP Request

`GET https://api.lessonly.com/api/v1/assignments/:status`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
status | yes | String | An assignment status. Supported statues are: incomplete, completed, overdue, or grade_pending
<%= pagination_query_params.chomp %>
