# Users

## List Users

```shell
<%= api_get_request('/users') %>
```

> The above command returns JSON structured like this:

```json
{
    "type": "users",
    "total_users": 300,
    "total_pages": 150,
    "page": 1,
    "per_page": 2,
    "users": [
        {
            "id": 78,
            "resource_type": "user",
            "ext_uid": "1234567899",
            "email": "joe@lessonly.com",
            "name": "Joe Ubuntu",
            "role": "admin",
            "role_id": 42,
            "archived_at": null,
            "archived_by_user_id": null,
            "job_title": "",
            "business_unit": "",
            "department": "",
            "location": "",
            "locale": "en",
            "hire_date": null,
            "manager_name": ""
        },
        {
            "id": 1694,
            "resource_type": "user",
            "ext_uid": null,
            "email": "alexie@lessonly.com",
            "name": "James alexie",
            "role": "admin",
            "role_id": 42,
            "archived_at": "2019-02-01T02:51:40.436-05:00",
            "archived_by_user_id": 1640090,
            "job_title": null,
            "business_unit": null,
            "department": null,
            "location": null,
            "locale": "en",
            "hire_date": null,
            "manager_name": null
        }
    ]
}
```

This endpoint retrieves all users.

### HTTP Request

`GET https://api.lessonly.com/api/v1/users?filter[email]=email@example.com`

### Query Parameters

Parameter | Required | Type | Description
--------- | ------- | ------- | -----------
<%= pagination_query_params.chomp %>
filter | no | String | Specified user filter for users list. Supported filters are email, ext_uid, sso_id, and custom_user_field. The SSO ID is the provider ID that we store from a successful SSO request. The format for custom_user_field is `filter[custom_user_field][FIELD_ID]=FIELD_VALUE`.

## List Users (v1.1)

```shell
<%= api_get_request('/users', 'v1.1') %>
```

> The above command returns JSON structured like this:

```json
{
    "type": "users",
    "total_users": 300,
    "total_pages": 150,
    "page": 1,
    "per_page": 2,
    "users": [
        {
            "id": 78,
            "resource_type": "user",
            "ext_uid": "1234567899",
            "email": "max@lessonly.com",
            "name": "Max Yoder",
            "role": "admin",
            "role_id": 42,
            "archived_at": null,
            "archived_by_user_id": null,
            "job_title": "",
            "business_unit": "",
            "department": "",
            "location": "",
            "locale": "en",
            "hire_date": null,
            "manager_name": "",
            "mobile_phone_number": null,
            "custom_user_field_data": [
                {
                    "id": 1823576,
                    "custom_user_field_id": 2096,
                    "value": "3171234567",
                    "name": "SMS Reminder Phone Number"
                },
            ],
            "groups": {
                "member": [
                    {
                        "id": 38780,
                        "name": "Test Group"
                    },
                    {
                        "id": 15251,
                        "name": "Leadership: Execs, Directors & Managers"
                    }
                ],
                "manager": [
                    {
                        "id": 46421,
                        "name": "Org - AE - West"
                    },
                    {
                        "id": 46407,
                        "name": "Org - Customer Support"
                    },
                ]
            }
        }
    ]
}
```

This endpoint retrieves all users.

### HTTP Request

`GET https://api.lessonly.com/api/v1.1/users?filter[email]=email@example.com`

### Query Parameters

Parameter | Required | Type | Description
--------- | ------- | ------- | -----------
<%= pagination_query_params.chomp %>
filter | no | String | Specified user filter for users list. Supported filters are email, ext_uid, sso_id, and custom_user_field. The SSO ID is the provider ID that we store from a successful SSO request. The format for custom_user_field is `filter[custom_user_field][FIELD_ID]=FIELD_VALUE`.


## Show User Details

```shell
<%= api_get_request("/users/:user_id") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user",
  "resource_type": "user",
  "id": 1,
  "name": "Test User",
  "email": "test@test.com",
  "role": "learner",
  "role_id": 42,
  "ext_uid": "ABC123",
  "job_title": "Account Executive",
  "business_unit": "Global",
  "department": "Sales",
  "location": "Illinois",
  "locale": "en",
  "hire_date": "2014-12-25",
  "manager_name": "Mary Doe",
  "custom_user_field_data": [
    {
      "id": 1,
      "custom_user_field_id": 1,
      "name": "Custom Field Name 1",
      "value": "Custom Value 1"
    }
  ],
  "archived_at": null,
  "archived_by_user_id": null
}
```

This endpoint retrieves all the user's details including their custom field data.  To see the users groups see the user group endpoint.

### HTTP Request

`GET https://api.lessonly.com/api/v1/users/:user_id`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.

## Show User Learning Library Statistics

```shell
<%= api_get_request("/users/:user_id/learning_library_statistics") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user_learning_library_statistics",
  "learning_library_statistics": {
     "total_completed": 3,
     "total_views": 50,
     "unique_lesson_and_course_views": 10
  }
}
```

This endpoint retrieves all the user's learning library statistics.
*Note: this endpoint is available only to customers whose plan includes the Learning Library*

### HTTP Request

`GET https://api.lessonly.com/api/v1/users/:user_id/learning_library_statistics`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.

## Create User

```shell
<%= post_request("/users") %>
-d '{
  "name": "User Name",
  "email": "email@example.com",
  "role_id": 32,
  "ext_uid": "ABC123",
  "job_title": "Account Executive",
  "business_unit": "Global",
  "department": "Sales",
  "location": "Illinois",
  "locale": "en",
  "hire_date": "2014-12-25",
  "manager_name": "Mary Doe",
  "custom_user_fields": [
    {
      "custom_user_field_id": 1,
      "value": "Custom Value 1"
    },
    {
      "name": "Custom Field Name 2",
      "value": "Custom Value 2"
    }
  ]
}'
```


> A successful post returns JSON consisting of the show user detail response

```json
 {
  "type": "create_user",
  "resource_type": "user",
  "id": 1,
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "role_id": 32,
  "ext_uid": "ABC123",
  "job_title": "Account Executive",
  "business_unit": "Global",
  "department": "Sales",
  "location": "Illinois",
  "locale": "en",
  "hire_date": "2014-12-25",
  "manager_name": "Mary Doe",
  "custom_user_field_data":
    [
      {
        "id": 1,
        "custom_user_field_id": 1,
        "name": "Custom Field Name 1",
        "value": "Custom Value 1"
      },
      {
        "id": 2,
        "custom_user_field_id": 2,
        "name": "Custom Field Name 2",
        "value": "Custom Value 2"
      }
    ]
}
```

This endpoint allows you to create a user in the api.

### HTTP Request

`POST https://api.lessonly.com/api/v1/users/ -d params`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
name | yes | String | User full name. Cannot begin with a space and the following characters are restricted: `!@#\$%\^&*+=()&#124;[];
email | yes | String | User Email
role | role or role_id | String | User role to change user to. Options: admin, manager, creator, learner. You must use either `role` or `role_id`
role_id | role or role_id | Integer | The ID of the role to associate with the user. This is the prefered way to set a role. You must use either `role` or `role_id`
ext_uid | no | String | The user's ID in another system, useful for linking data.
job_title | no | String | User job title
business_unit | no | String | User business unit
department | no | String | User department
location | no | String | User location
locale | no | String | User locale code to control the interface language. Options: ar, de, en, es, fr, it, ja, nl, pt, ru, sv, zh-CN. Defaults to 'en'.
hire_date | no | String | User hire date. Must be an ISO8601 formatted date (YYYY-MM-DD).
manager_name | no | String | User manager name
notify | no | String | Whether or not to notify the user.  Passing 'false' will not send an email notification to the user that their account has been created. Defaults to 'true' for admin, manager, creator and custom roles. Defaults to 'false' for learner role.
custom_user_fields |  no | Array | Custom user fields for the user. Hashes must contain a "value" and either a "customer_user_field_id" or "name". If an unknown custom user field "name" is provided, a new custom user field will be created with that name.

## Update User

```shell
<%= put_request("/users/:user_id", params: true) %>
-d '{
  "name": "User Name",
  "email": "email@example.com",
  "role_id": 32,
  "ext_uid": "ABC123",
  "job_title": "Account Executive",
  "business_unit": "Global",
  "department": "Sales",
  "location": "Illinois",
  "locale": "en",
  "hire_date": "2014-12-25",
  "manager_name": "Mary Doe",
  "custom_user_fields": [
    {
      "custom_user_field_id": 1,
      "value": "Custom Value 1"
    },
    {
      "name": "Custom Field Name 2",
      "value": "Custom Value 2"
    }
  ]
}'
```

> A successful update returns JSON consisting of the show user detail response

```json
 {
  "type": "update_user",
  "resource_type": "user",
  "id": 1,
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "role_id": 32,
  "ext_uid": "ABC123",
  "job_title": "Account Executive",
  "business_unit": "Global",
  "department": "Sales",
  "location": "Illinois",
  "locale": "en",
  "hire_date": "2014-12-25",
  "manager_name": "Mary Doe",
  "custom_user_field_data":
    [
      {
        "id": 1,
        "custom_user_field_id": 1,
        "name": "Custom Field Name 1",
        "value": "Custom Value 1"
      },
      {
        "id": 2,
        "custom_user_field_id": 2,
        "name": "Custom Field Name 2",
        "value": "Custom Value 2"
      }
    ]
}
```

This endpoint allows you to update a user in the api.

### HTTP Request

`PUT https://api.lessonly.com/api/v1/users/:user_id -d params`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
name | no | String | User name to change user to
email | no | String | User Email to change user to
role | no | String | User role to change user to. Options: admin, manager, creator, learner. You must use either `role` or `role_id`.
role_id | no | Integer | The ID of the role to associate with the user. This is the prefered way to set a role. You must use either `role` or `role_id`.
ext_uid | no | String | The user's ID in another system, useful for linking data.
job_title | no | String | User job title
business_unit | no | String | User business unit
department | no | String | User department
location | no | String | User location
locale | no | String | User locale code to control the interface language. Options: ar, de, en, es, fr, it, ja, nl, pt, ru, sv, zh-CN. Defaults to 'en'.
hire_date | no | String | User hire date. Must be an ISO8601 formatted date (YYYY-MM-DD).
manager_name | no | String | User manager name
custom_user_fields |  no | Array | Custom user fields for the user. Hashes must contain a "value" and either a "customer_user_field_id" or "name". If an unknown custom user field "name" is provided, a new custom user field will be created with that name. If the user does not have a value for the specified customer user field it will be added, otherwise it will be updated to the specified "value".

## Archive User

```shell
<%= put_request("/users/:user_id/archive").chomp(' \\') %>
```

> The above command returns JSON structured like this:

```json
{
    "archived_at": "2016-10-13T09:34:24.151-04:00",
    "archived_by_user_id": null,
    "custom_user_field_data": [],
    "email": "learner@example.com",
    "ext_uid": null,
    "job_title": "Account Executive",
    "business_unit": "Global",
    "department": "Sales",
    "location": "Illinois",
    "locale": "en",
    "hire_date": "2014-12-25",
    "manager_name": "Mary Doe",
    "id": 739413,
    "name": "Beta Learner",
    "resource_type": "user",
    "role": "learner",
    "role_id": 32,
    "type": "user"
}
```

This endpoint allows the archiving of a single user.

### HTTP Request

`PUT https://api.lessonly.com/api/v1/users/:user_id/archive`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to archive.  The company must have access to the user.

## Restore User

```shell
<%= put_request("/users/:user_id/restore").chomp(' \\') %>
```

> The above command returns JSON structured like this:

```json
{
    "archived_at": null,
    "archived_by_user_id": null,
    "custom_user_field_data": [],
    "email": "learner@example.com",
    "ext_uid": null,
    "job_title": "Account Executive",
    "business_unit": "Global",
    "department": "Sales",
    "location": "Illinois",
    "locale": "en",
    "hire_date": "2014-12-25",
    "manager_name": "Mary Doe",
    "id": 739413,
    "name": "Beta Learner",
    "resource_type": "user",
    "role": "learner",
    "role_id": 32,
    "type": "user"
}
```

This endpoint allows the restoring of a single archived user.

### HTTP Request

`PUT https://api.lessonly.com/api/v1/users/:user_id/restore`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to restore.  The company must have access to the user.

## Delete User

```shell
<%= delete_request('/users/:user_id') %>
```

> A successful update returns JSON consisting of the id of the deleted user

```json
{
  "type": "delete_user",
  "id": "3"
}
```

This endpoint allows you to delete a user in the API.

### HTTP Request

`DELETE https://api.lessonly.com/api/v1/users/:user_id`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to delete.  The company must have access to the user.


## User Groups

```shell
<%= api_get_request("/users/:user_id/groups") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user_groups",
  "memberships": [
    {
      "id": 1,
      "name": "Test Group"
    },
    {
      "id": 3,
      "name": "Test Group 3"
    }
  ],
  "managing": [
    {
      "id": 1,
      "name": "Test Group5"
    }
  ]
}
```

This endpoint allows you to list out a user's group memberships and groups they are managing.

### HTTP Request

`GET https://api.lessonly.com/api/v1/users/:user_id/groups`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.


## Update User Groups

```shell
<%= put_request("/users/:user_id/groups", params: true) %>
-d '{
  "memberships": [
    {
      "id": 1
    },
    {
      "id": 2,
      "remove": "true"
    }
  ],
  "managing": [
    {
      "id": 3,
      "remove": "true"
    },
    {
      "id": 4
    }
  ]
}'
```

> A successful update will return JSON consisting of the user group repsonse:

```json
{
  "type": "update_user_groups",
  "memberships": [
    {
      "id": 1,
      "name": "Test Group"
    },
    {
      "id": 3,
      "name": "Test Group 3"
    }
  ],
  "managing": [
    {
      "id": 1,
      "name": "Test Group5"
    }
  ]
}
```

This endpoint allows you to update a user's involvement in various groups.

### HTTP Request

`PUT https://api.lessonly.com/api/v1/users/:user_id/groups`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
memberships | no | Array |  The groups in which the user is a member.  Passing "remove": "true" will remove this association.
managing | no | Array | The groups in which the user is managing.  Passing "remove": "true" will remove this association.


## User Assignments

```shell
<%= api_get_request("/users/:user_id/assignments") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user_assignments",
  "assignments": [
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 1,
      "assignee_id": 1,
      "ext_uid": "ABC123",
      "assignable_id": 1,
      "assignable_type": "Lesson",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": "2020-09-30T00:00:00Z",
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Completed",
      "score": 20
    },
    {
      "type": "Assignment",
      "resource_type": "assigment",
      "id": 2,
      "assignee_id": 1,
      "ext_uid": "DEF456",
      "assignable_id": 2,
      "assignable_type": "LearningPaths::Path",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": null
    }
  ]
}
```

This endpoint returns a list of assignments for a given user.

### HTTP Request

`GET https://api.lessonly.com/api/v1/users/:user_id/assignments`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.


## Create User Assignments

```shell
<%= post_request("/users/:user_id/assignments") %>
-d '{
  "assignments": [
    {
      "assignable_id": 1,
      "assignable_type": "Lesson",
      "due_by": "2020-09-30",
      "notify": false
    },
    {
      "assignable_id": 3,
      "assignable_type": "LearningPaths::Path",
      "due_by": "2020-09-30",
      "notify": false
    }
  ]
}'
```

> A successful update will return JSON consisting of the user assignment repsonse:

```json
{
  "type": "create_user_assignments",
  "assignments": [
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 1,
      "assignee_id": 1,
      "ext_uid": "ABC123",
      "assignable_id": 1,
      "assignable_type": "Lesson",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": 20
    },
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 3,
      "assignee_id": 2,
      "ext_uid": "DEF456",
      "assignable_id": 2,
      "assignable_type": "LearningPaths::Path",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": null
    }
  ]
}
```

This endpoint allows you to create assignments for a user.

### HTTP Request

`POST https://api.lessonly.com/api/v1/users/:user_id/assignments`

### Query Parameters

Parameter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
assignments | yes | Array |  Array of assignments to be made to the user.  Each requires an assignable_id and assignable_type of "Lesson" or "LearningPaths::Path". By default, an email will be sent to the assignee; it will come from notifications@lessonly.com. To suppress the email notification set `notify` to `false`.
