# Users

## List Users

```shell
<%= api_get_request('/users') %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "users",
  "resource_type": "user",
  "total_users": 2000,
  "page": 1,
  "per_page": 2,
  "total_pages": 1000,
  "users":[
      {
        "id": 1,
        "name": "User Name",
        "email": "email1@example.com",
        "role": "learner",
        "ext_uid": "ABC123"
      },
      {
        "id": 2,
        "name": "User Name",
        "email": "email2@example.com",
        "role": "learner",
        "ext_uid": "DEF456"
      }
    ]
}
```

This endpoint retrieves all users.

### HTTP Request

`GET https://api.lesson.ly/api/v1/users?filter[email]=email@example.com`

### Query Parameters

Parameter | Required | Type | Description
--------- | ------- | ------- | -----------
page | no | Positive Integer | which page in the pagination to fetch.  Default = 1
per_page | no | Positive Integer | how many results to return in each page.  Default = 50
filter | no | String | Specified user filter for users list.  Supported filters are email and ext_uid.

## Show User Details

```shell
<%= api_get_request("/users/:user_id") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user",
  "resource_type": "user",
  "id": 1,
  "name": "Test User",
  "email": "test@test.com",
  "role": "learner",
  "ext_uid": "ABC123",
  "custom_user_field_data":
    [
      {
        "id": 1,
        "custom_user_field_id": 1,
        "value": "Custom Value 1"
      },
    ]
}
```

This endpoint retrieves all the user's details including their custom field data.  To see the users groups see the user group endpoint.

### HTTP Request

`GET https://api.lesson.ly/api/v1/users/:user_id`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.

## Create User

```shell
<%= post_request("/users") %>
```

> The following are sample parameters for this request:

```json
{
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "ext_uid": "ABC123",
  "custom_user_fields": [
    {
      "custom_user_field_id": 1,
      "value": "Custom Value 1"
    },
    {
      "custom_user_field_id": 2,
      "value": "Custom Value 2"
    }
  ]
}
```

> A successful post returns JSON consisting of the show user detail response

```json
 {
  "type": "create_user",
  "resource_type": "user",
  "id": 1,
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "ext_uid": "ABC123",
  "custom_user_field_data":
    [
      {
        "id": 1,
        "custom_user_field_id": 1,
        "value": "Custom Value 1"
      },
      {
        "id": 2,
        "custom_user_field_id": 2,
        "value": "Custom Value 2"
      }
    ]
}
```

This endpoint allows you to create a user in the api.

### HTTP Request

`POST https://api.lesson.ly/api/v1/users/ -d params`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
name | yes | String | User full name. Cannot begin with a space and the following characters are restricted: `!@#\$%\^&*+=()&#124;[];
email | yes | String | User Email
role | yes | String | User role. Options: admin, manager, creator, learner
ext_uid | no | String | The user's ID in another system, useful for linking data.
notify | no | String | Whether or not to notify the user.  Passing 'false' will not send an email notification to the user that their account has been created. Defaults to 'true'.
custom_user_fields |  no | Array | Custom user field values for specified custom user field ids. Hashses must contain a "customer_user_field_id" and a "value".

## Update User

```shell
<%= put_request("/users/:user_id") %>
```

> The following are sample parameters for this request:

```json
{
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "ext_uid": "ABC123",
  "custom_user_fields": [
    {
      "custom_user_field_id": 1,
      "value": "Custom Value 1"
    },
    {
      "custom_user_field_id": 2,
      "value": "Custom Value 2"
    }
  ]
}
```

> A successful update returns JSON consisting of the show user detail response

```json
 {
  "type": "update_user",
  "resource_type": "user",
  "id": 1,
  "name": "User Name",
  "email": "email@example.com",
  "role": "learner",
  "ext_uid": "ABC123",
  "custom_user_field_data":
    [
      {
        "id": 1,
        "custom_user_field_id": 1,
        "value": "Custom Value 1"
      },
      {
        "id": 2,
        "custom_user_field_id": 2,
        "value": "Custom Value 2"
      }
    ]
}
```

This endpoint allows you to update a user in the api.

### HTTP Request

`PUT https://api.lesson.ly/api/v1/users/:user_id -d params`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
name | no | String | User name to change user to
email | no | String | User Email to change user to
role | no | String | User role to change user to. Options: admin, manager, creator, learner
ext_uid | no | String | The user's ID in another system, useful for linking data.
custom_user_fields |  no | Array | Custom user fields for the update.  If the user does not have a value for the specified "customer_user_field_id" it will be added, otherwise it will be updated to the specified "value".

## Delete User

```shell
curl -X DELETE -u "DOMAIN:API_KEY" "https://api.lesson.ly/api/v1/users/:user_id"
```

> A successful update returns JSON consisting of the id of the deleted user

```json
{
  "type": "delete_user",
  "id": "3"
}
```

This endpoint allows you to delete a user in the API.

### HTTP Request

`DELETE https://api.lesson.ly/api/v1/users/:user_id`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to delete.  The company must have access to the user.


## User Groups

```shell
<%= api_get_request("/users/:user_id/groups") %>
```

> The above command returns JSON structured like this:

```json

{"type": "user_groups",
 "memberships":
    [
        {"id": 1, "name": "Test Group"},
        {"id": 3, "name": "Test Group 3"},
    ],
  "managing":
    [
        {"id": 1, "name": "Test Group5"},
    ]
}
```

This endpoint allows you to list out a user's group memberships and groups they are managing.

### HTTP Request

`GET https://api.lesson.ly/api/v1/users/:user_id/groups`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.


## Update User Groups

```shell
<%= post_request("/users/:user_id/groups") %>
```

> The following are sample parameters for this request:

```json
{
  "memberships":
    [
      {"id": 1 },
      {"id": 2, "remove": "true"}

    ],
  "managing":
    [
      {"id":  3, "remove": "true" },
      {"id":  4 }
    ]

}
```
> A successful update will return JSON consisting of the user group repsonse:

```json
{
  "type": "update_user_groups",
  "memberships":
    [
        {"id": 1, "name": "Test Group"},
        {"id": 3, "name": "Test Group 3"},
    ],
  "managing":
    [
        {"id": 1, "name": "Test Group5"},
    ]
}
```

This endpoint allows you to update a user's involvement in various groups.

### HTTP Request

`PUT https://api.lesson.ly/api/v1/users/:user_id/groups`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
memberships | no | Array |  The groups in which the user is a member.  Passing "remove": "true" will remove this association.
managing | no | Array | The groups in which the user is managing.  Passing "remove": "true" will remove this association.


## User Assignments

```shell
<%= post_request("/users/:user_id/assignments") %>
```

> The above command returns JSON structured like this:

```json
{
  "type": "user_assignments",
  "assignments":[
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 1,
      "assignee_id": 1,
      "ext_uid": "ABC123",
      "assignable_id": 1,
      "assignable_type": "Lesson",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": "2020-09-30T00:00:00Z",
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Completed",
      "score": 20
    },
    {
      "type": "Assignment",
      "resource_type": "assigment",
      "id": 2,
      "assignee_id": 2,
      "ext_uid": "DEF456",
      "assignable_id": 2,
      "assignable_type": "Course",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": 0
    }
  ]
}
```

This endpoint allows you to list out a the assignments a user has been given

### HTTP Request

`GET https://api.lesson.ly/api/v1/users/:user_id/assignments`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.


## Create User Assignments

```shell
<%= post_request("/users/:user_id/assignments") %>
```

> The following are sample parameters for this request:

```json
{
  "assignments":
    [
      {
        "assignable_id": 1,
        "assignable_type": "Lesson",
        "due_by": "2020-09-30",
        "notify": false
      }
      {
        "assignable_id": 3,
        "assignable_type": "Course",
        "due_by": "2020-09-30",
        "notify": false
      }
    ]
}
```
> A successful update will return JSON consisting of the user assignment repsonse:

```json
{
  "type": "create_user_assignments",
  "assignments":[
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 1,
      "assignee_id": 1,
      "ext_uid": "ABC123",
      "assignable_id": 1,
      "assignable_type": "Lesson",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": 20
    },
    {
      "type": "Assignment",
      "resource_type": "assignment",
      "id": 3,
      "assignee_id": 2,
      "ext_uid": "DEF456",
      "assignable_id": 2,
      "assignable_type": "Course",
      "due_by": "2020-09-30T00:00:00Z",
      "reassigned_at": "2020-09-30T00:00:00Z",
      "completed_at": null,
      "updated_at": "2020-09-30T00:00:00Z",
      "status": "Incomplete",
      "score": 0
    }
  ]
}
```

This endpoint allows you to create assignments for a user.

### HTTP Request

`POST https://api.lesson.ly/api/v1/users/:user_id/assignments`

### Query Parameters

Paramter | Required | Type |  Description
--- | --- | --- | ---
user_id | yes | Positive Integer | The user to access.  The company must have access to the user.
assignments | yes | Array |  Array of assignments to be made to the user.  Each requires an assignable_id and assignable_type of "Lesson" or "Course". By default, an email will be sent to the assignee; it will come from notifications@lesson.ly. To suppress the email notification set `notify` to `false`.
